name: CI/CD - npm workspaces

on:
  push:
    branches: [main, develop, dev, master]
  pull_request:
    branches: [main, develop, dev, master]

# Permissions needed for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

env:
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Detect changes
  detect-changes:
    name: 🔍 Detect Changed Applications
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      main-app: ${{ steps.filter.outputs.main-app }}
      chart: ${{ steps.filter.outputs.chart }}
      appgen: ${{ steps.filter.outputs.appgen }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect changes in applications
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'apps/api/**'
            main-app:
              - 'apps/main-app/**'
            chart:
              - 'apps/chart/**'
            appgen:
              - 'apps/appgen/**'

  # Job 2: Quality checks
  quality:
    name: ✅ Quality checks
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.api == 'true' ||
      needs.detect-changes.outputs.main-app == 'true' ||
      needs.detect-changes.outputs.chart == 'true' ||
      needs.detect-changes.outputs.appgen == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: npm ci

      - name: Format check
        run: npm run format:check

      - name: Lint all projects
        run: npm run lint:all

      # TODO: Enable tests after fixing Chrome setup and test configuration
      # - name: Test all projects
      #   run: npm run test:all
      #
      # - name: Upload test coverage
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: test-coverage
      #     path: '**/coverage'
      #     retention-days: 7

  # Deploy jobs (only on push to main/master/dev branches)
  # Note: Docker builds are handled within the deployment workflows
  deploy-api:
    name: 🚀 Deploy API
    needs: [detect-changes, quality]
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev') &&
      needs.detect-changes.outputs.api == 'true'
    uses: ./.github/workflows/deploy-api.yml
    secrets: inherit

  deploy-main-app:
    name: 🚀 Deploy Main App
    needs: [detect-changes, quality]
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev') &&
      needs.detect-changes.outputs.main-app == 'true'
    uses: ./.github/workflows/deploy-main-app.yml
    secrets: inherit

  deploy-chart:
    name: 🚀 Deploy Chart
    needs: [detect-changes, quality]
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      needs.detect-changes.outputs.chart == 'true'
    uses: ./.github/workflows/deploy-chart.yml
    secrets: inherit

  # Summary
  summary:
    name: 📊 CI/CD Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, quality, deploy-api, deploy-main-app, deploy-chart]
    if: |
      always() && (
        needs.detect-changes.outputs.api == 'true' ||
        needs.detect-changes.outputs.main-app == 'true' ||
        needs.detect-changes.outputs.chart == 'true' ||
        needs.detect-changes.outputs.appgen == 'true'
      )
    steps:
      - name: Display CI/CD summary
        run: |
          echo "## 📊 CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes Detected:" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: ${{ needs.detect-changes.outputs.api == 'true' && '✅ Changed' || '⏭️ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Main App**: ${{ needs.detect-changes.outputs.main-app == 'true' && '✅ Changed' || '⏭️ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart**: ${{ needs.detect-changes.outputs.chart == 'true' && '✅ Changed' || '⏭️ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AppGen**: ${{ needs.detect-changes.outputs.appgen == 'true' && '✅ Changed' || '⏭️ No changes' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployments:" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: ${{ needs.deploy-api.result == 'success' && '✅ Deployed' || (needs.deploy-api.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Main App**: ${{ needs.deploy-main-app.result == 'success' && '✅ Deployed' || (needs.deploy-main-app.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart**: ${{ needs.deploy-chart.result == 'success' && '✅ Deployed' || (needs.deploy-chart.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }}" >> $GITHUB_STEP_SUMMARY
