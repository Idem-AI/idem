name: CI/CD - npm workspaces

on:
  push:
    branches: [main, develop, dev, master]
  pull_request:
    branches: [main, develop, dev, master]

env:
  NODE_VERSION: '18.x'

jobs:
  # Job 1: Detect changes
  detect-changes:
    name: 🔍 Detect Changed Applications
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      main-app: ${{ steps.filter.outputs.main-app }}
      chart: ${{ steps.filter.outputs.chart }}
      appgen: ${{ steps.filter.outputs.appgen }}
      any-app: ${{ steps.filter.outputs.api == 'true' || steps.filter.outputs.main-app == 'true' || steps.filter.outputs.chart == 'true' || steps.filter.outputs.appgen == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect changes in applications
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'apps/api/**'
            main-app:
              - 'apps/main-app/**'
            chart:
              - 'apps/chart/**'
            appgen:
              - 'apps/appgen/**'

  # Job 2: Setup
  setup:
    name: 🔧 Setup
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-app == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: npm ci

  # Job 3: Quality checks
  quality:
    name: ✅ Quality checks
    runs-on: ubuntu-latest
    needs: [detect-changes, setup]
    if: needs.detect-changes.outputs.any-app == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: npm ci

      - name: Format check
        run: npm run format:check

      - name: Lint all projects
        run: npm run lint:all

      # TODO: Enable tests after fixing Chrome setup and test configuration
      # - name: Test all projects
      #   run: npm run test:all
      #
      # - name: Upload test coverage
      #   uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: test-coverage
      #     path: '**/coverage'
      #     retention-days: 7

  # Job 4: Build changed projects only
  build-api:
    name: 🔨 Build API
    runs-on: ubuntu-latest
    needs: [detect-changes, setup, quality]
    if: needs.detect-changes.outputs.api == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build API
        run: npm run build --workspace=apps/api

      - name: Upload API build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: api-build
          path: apps/api/dist
          retention-days: 7

  build-main-app:
    name: 🔨 Build Main App
    runs-on: ubuntu-latest
    needs: [detect-changes, setup, quality]
    if: needs.detect-changes.outputs.main-app == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Main App
        run: npm run build --workspace=apps/main-app

      - name: Upload Main App build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: main-app-build
          path: apps/main-app/dist
          retention-days: 7

  build-chart:
    name: 🔨 Build Chart
    runs-on: ubuntu-latest
    needs: [detect-changes, setup, quality]
    if: needs.detect-changes.outputs.chart == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: 'apps/chart/.node-version'
          cache: pnpm
          cache-dependency-path: 'apps/chart/pnpm-lock.yaml'

      - name: Build Chart
        working-directory: apps/chart
        run: |
          pnpm install
          pnpm build

      - name: Upload Chart build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: chart-build
          path: apps/chart/build
          retention-days: 7

  build-appgen:
    name: 🔨 Build AppGen
    runs-on: ubuntu-latest
    needs: [detect-changes, setup, quality]
    if: needs.detect-changes.outputs.appgen == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build AppGen
        run: npm run build --workspace=apps/appgen

      - name: Upload AppGen build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: appgen-build
          path: apps/appgen/apps/*/dist
          retention-days: 7

  # Deploy jobs (only on push to main/master/dev branches)
  deploy-api:
    name: 🚀 Deploy API
    needs: [detect-changes, build-api]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev') &&
      needs.detect-changes.outputs.api == 'true'
    uses: ./.github/workflows/deploy-api.yml
    secrets: inherit

  deploy-main-app:
    name: 🚀 Deploy Main App
    needs: [detect-changes, build-main-app]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev') &&
      needs.detect-changes.outputs.main-app == 'true'
    uses: ./.github/workflows/deploy-main-app.yml
    secrets: inherit

  deploy-chart:
    name: 🚀 Deploy Chart
    needs: [detect-changes, build-chart]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      needs.detect-changes.outputs.chart == 'true'
    uses: ./.github/workflows/deploy-chart.yml
    secrets: inherit

  # Summary
  summary:
    name: 📊 CI/CD Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, build-api, build-main-app, build-chart, build-appgen, deploy-api, deploy-main-app, deploy-chart]
    if: always() && needs.detect-changes.outputs.any-app == 'true'
    steps:
      - name: Display CI/CD summary
        run: |
          echo "## 📊 CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Applications Built:" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: ${{ needs.detect-changes.outputs.api == 'true' && '✅ Built' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Main App**: ${{ needs.detect-changes.outputs.main-app == 'true' && '✅ Built' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart**: ${{ needs.detect-changes.outputs.chart == 'true' && '✅ Built' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AppGen**: ${{ needs.detect-changes.outputs.appgen == 'true' && '✅ Built' || '⏭️ Skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployments:" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: ${{ needs.deploy-api.result == 'success' && '✅ Deployed' || (needs.deploy-api.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Main App**: ${{ needs.deploy-main-app.result == 'success' && '✅ Deployed' || (needs.deploy-main-app.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart**: ${{ needs.deploy-chart.result == 'success' && '✅ Deployed' || (needs.deploy-chart.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }}" >> $GITHUB_STEP_SUMMARY
